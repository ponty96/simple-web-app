// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAddress = `-- name: CreateAddress :one
INSERT INTO addresses (
 line1, city, state, postal_code,
 country, line2
) VALUES (
 $1, $2, $3, $4, $5, $6
)
RETURNING id, line1, line2, city, state, postal_code, country, created_at, updated_at
`

type CreateAddressParams struct {
	Line1      string
	City       string
	State      string
	PostalCode string
	Country    string
	Line2      pgtype.Text
}

func (q *Queries) CreateAddress(ctx context.Context, arg *CreateAddressParams) (*Address, error) {
	row := q.db.QueryRow(ctx, createAddress,
		arg.Line1,
		arg.City,
		arg.State,
		arg.PostalCode,
		arg.Country,
		arg.Line2,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.Line1,
		&i.Line2,
		&i.City,
		&i.State,
		&i.PostalCode,
		&i.Country,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  user_id, total_amount, status,
  shipping_address_id, billing_address_id
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, user_id, shipping_address_id, billing_address_id, total_amount, status, created_at, updated_at
`

type CreateOrderParams struct {
	UserID            pgtype.UUID
	TotalAmount       pgtype.Numeric
	Status            OrderStatus
	ShippingAddressID pgtype.UUID
	BillingAddressID  pgtype.UUID
}

func (q *Queries) CreateOrder(ctx context.Context, arg *CreateOrderParams) (*Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.UserID,
		arg.TotalAmount,
		arg.Status,
		arg.ShippingAddressID,
		arg.BillingAddressID,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ShippingAddressID,
		&i.BillingAddressID,
		&i.TotalAmount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (
 order_id, product_id, quantity,
 price, total_price
) VALUES (
 $1, $2, $3, $4, $5
)
RETURNING id, order_id, product_id, quantity, price, total_price, created_at, updated_at
`

type CreateOrderItemParams struct {
	OrderID    pgtype.UUID
	ProductID  pgtype.UUID
	Quantity   int32
	Price      pgtype.Numeric
	TotalPrice pgtype.Numeric
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg *CreateOrderItemParams) (*OrderItem, error) {
	row := q.db.QueryRow(ctx, createOrderItem,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
		arg.Price,
		arg.TotalPrice,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteOrderItems = `-- name: DeleteOrderItems :many
DELETE FROM order_items RETURNING id, order_id, product_id, quantity, price, total_price, created_at, updated_at
`

func (q *Queries) DeleteOrderItems(ctx context.Context) ([]*OrderItem, error) {
	rows, err := q.db.Query(ctx, deleteOrderItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
			&i.Price,
			&i.TotalPrice,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteOrders = `-- name: DeleteOrders :many
DELETE FROM orders RETURNING id, user_id, shipping_address_id, billing_address_id, total_amount, status, created_at, updated_at
`

func (q *Queries) DeleteOrders(ctx context.Context) ([]*Order, error) {
	rows, err := q.db.Query(ctx, deleteOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ShippingAddressID,
			&i.BillingAddressID,
			&i.TotalAmount,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrder = `-- name: GetOrder :one
SELECT id, user_id, shipping_address_id, billing_address_id, total_amount, status, created_at, updated_at FROM orders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id pgtype.UUID) (*Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ShippingAddressID,
		&i.BillingAddressID,
		&i.TotalAmount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listOrderItems = `-- name: ListOrderItems :many
SELECT id, order_id, product_id, quantity, price, total_price, created_at, updated_at FROM order_items
WHERE order_id = $1
ORDER BY updated_at
`

func (q *Queries) ListOrderItems(ctx context.Context, orderID pgtype.UUID) ([]*OrderItem, error) {
	rows, err := q.db.Query(ctx, listOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
			&i.Price,
			&i.TotalPrice,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrders = `-- name: ListOrders :many
SELECT id, user_id, shipping_address_id, billing_address_id, total_amount, status, created_at, updated_at FROM orders
WHERE user_id = $1
ORDER BY updated_at
`

func (q *Queries) ListOrders(ctx context.Context, userID pgtype.UUID) ([]*Order, error) {
	rows, err := q.db.Query(ctx, listOrders, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ShippingAddressID,
			&i.BillingAddressID,
			&i.TotalAmount,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
